{"version":3,"sources":["../../../src/objects/cards.js"],"names":["Cards","_arr","_tripPoints","index","i","length","startFlag","j","from","to","prev","next","buff","elem","Object","assign","push","cards","Promise","resolve","reject","JSON","parse","err","toString","_sort","forEach","result","transport","transportInfo","transport_info","keys","info"],"mappings":"AAAA;;;AAGA;;;;;;;;;;IACqBA,K;AACjB,qBAAc;AAAA;;AACV,aAAKC,IAAL,GAAY,EAAZ;AACA,aAAKC,WAAL,GAAmB,EAAnB;AACH;;AAED;;;;;;;;;;gCAMQ;AACJ,gBAAIC,cAAJ;AACA,iBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAI,KAAKH,IAAL,CAAUI,MAA9B,EAAsCD,GAAtC,EAA2C;AACvC,oBAAIE,YAAY,IAAhB;AACA,qBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAI,KAAKN,IAAL,CAAUI,MAA9B,EAAsCE,GAAtC,EAA2C;AACvC,wBAAI,KAAKN,IAAL,CAAUG,CAAV,EAAaI,IAAb,KAAsB,KAAKP,IAAL,CAAUM,CAAV,EAAaE,EAAvC,EAA2C;AACvC,6BAAKR,IAAL,CAAUG,CAAV,EAAaM,IAAb,GAAoBH,CAApB;AACA,6BAAKN,IAAL,CAAUM,CAAV,EAAaI,IAAb,GAAoBP,CAApB;AACAE,oCAAY,KAAZ;AACA;AACH;AACJ;AACD,oBAAIA,SAAJ,EAAe;AACXH,4BAAQC,CAAR;AACH;AACJ;;AAED,gBAAIQ,OAAO,EAAX;AACA,mBAAOA,KAAKP,MAAL,KAAgB,KAAKJ,IAAL,CAAUI,MAAjC,EAAyC;AACrC,oBAAIQ,OAAO,EAAX;AACAC,uBAAOC,MAAP,CAAcF,IAAd,EAAoB,KAAKZ,IAAL,CAAUE,KAAV,CAApB;AACA,uBAAOU,KAAKH,IAAZ;AACA,uBAAOG,KAAKF,IAAZ;AACAC,qBAAKI,IAAL,CAAUH,IAAV;AACAV,wBAAQ,KAAKF,IAAL,CAAUE,KAAV,EAAiBQ,IAAzB;AACH;;AAED,iBAAKV,IAAL,GAAYW,IAAZ;AACH;;AAGD;;;;;;;;;;;;;;;;;;;;;8CAkBsBK,K,EAAO;AAAA;;AACzB,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,oBAAI;AACA,0BAAKnB,IAAL,GAAYoB,KAAKC,KAAL,CAAWL,KAAX,CAAZ;AACH,iBAFD,CAEE,OAAOM,GAAP,EAAY;AACVH,2BAAOG,IAAIC,QAAJ,EAAP;AACH;;AAED,sBAAKC,KAAL;AACA,sBAAKxB,IAAL,CAAUyB,OAAV,CAAkB,gBAAQ;AACtB,wBAAIC,mBAAiBd,KAAKe,SAAtB,cAAwCf,KAAKL,IAA7C,YAAwDK,KAAKJ,EAA7D,OAAJ;;AAEA,wBAAIoB,gBAAgBhB,KAAKiB,cAAzB;AACAhB,2BAAOiB,IAAP,CAAYF,aAAZ,EAA2BH,OAA3B,CAAmC,eAAO,CAEzC,CAFD;AAGA,0BAAKxB,WAAL,CAAiBc,IAAjB,CAAsBW,MAAtB;AACH,iBARD;AASAR,wBAAQ,MAAKjB,WAAb;AACH,aAlBM,CAAP;AAmBH;;;6CAEoB8B,I,EAAM;AACvB,oBAAQA,IAAR;AACI,qBAAK,KAAL;AAAY;;AAER;AACH;AACD,qBAAK,OAAL;AAAc;;AAEV;AACH;AACD,qBAAK,OAAL;AAAc;;AAEV;AACH;AAZL;AAcH;;;;;;kBAlGgBhC,K","file":"cards.js","sourcesContent":["/**\r\n * Created by Denis on 31.03.2017.\r\n */\r\n'use strict';\r\nexport default class Cards {\r\n    constructor() {\r\n        this._arr = [];\r\n        this._tripPoints = [];\r\n    }\r\n\r\n    /**\r\n     * Сортировка карточек по пунктам отправления и назначения\r\n     *\r\n     * Используется метод с таблицой смежности (самой таблицы не строилось, сразу вставлялись значения следующего\r\n     * или предыдущего города\r\n     */\r\n    _sort() {\r\n        let index;\r\n        for (let i = 0; i < this._arr.length; i++) {\r\n            let startFlag = true;\r\n            for (let j = 0; j < this._arr.length; j++) {\r\n                if (this._arr[i].from === this._arr[j].to) {\r\n                    this._arr[i].prev = j;\r\n                    this._arr[j].next = i;\r\n                    startFlag = false;\r\n                    break;\r\n                }\r\n            }\r\n            if (startFlag) {\r\n                index = i;\r\n            }\r\n        }\r\n\r\n        let buff = [];\r\n        while (buff.length !== this._arr.length) {\r\n            let elem = {};\r\n            Object.assign(elem, this._arr[index]);\r\n            delete elem.prev;\r\n            delete elem.next;\r\n            buff.push(elem);\r\n            index = this._arr[index].next;\r\n        }\r\n\r\n        this._arr = buff;\r\n    }\r\n\r\n\r\n    /**\r\n     * Формирует читаемый маршрут из карточек и записывает в _tripPoints\r\n     *\r\n     * Структура обрабатываемых карточек:\r\n     * Object{\r\n     *      from - пункт отправки (обязательное поле)\r\n     *      to - пункт прибытия (обязательное поле)\r\n     *      transport - вид транспорта (обязательное поле) (car, plane, train)\r\n     *      transport_info {\r\n     *          gate - терминал\r\n     *          flight - рейс\r\n     *          number - номер (вагона, машины ...)\r\n     *          seat - место\r\n     *          info - дополнительная информация\r\n     *      }\r\n     *}\r\n     * @param {String} cards массив карточек\r\n     */\r\n    createTripDescription(cards) {\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                this._arr = JSON.parse(cards);\r\n            } catch (err) {\r\n                reject(err.toString());\r\n            }\r\n\r\n            this._sort();\r\n            this._arr.forEach(elem => {\r\n                let result = `Take ${elem.transport} from ${elem.from} to ${elem.to}. `;\r\n\r\n                let transportInfo = elem.transport_info;\r\n                Object.keys(transportInfo).forEach(key => {\r\n\r\n                });\r\n                this._tripPoints.push(result);\r\n            });\r\n            resolve(this._tripPoints);\r\n        });\r\n    }\r\n\r\n    _getDataForTransport(info) {\r\n        switch (info) {\r\n            case 'car': {\r\n\r\n                break;\r\n            }\r\n            case 'plane': {\r\n\r\n                break;\r\n            }\r\n            case 'train': {\r\n\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}"]}