{"version":3,"sources":["../../src/main.js"],"names":["Main","req","Promise","resolve","reject","_getBody","then","cards","createTripDescription","body","JSON","stringify","response","catch","console","log","err","on","chunk","push","Buffer","concat","toString"],"mappings":";;;;;;qjBAAA;;;;AAIA;;;;;;;;IAEqBA,I;AACjB,oBAAc;AAAA;AAEb;;AAED;;;;;;;;;gCAKQC,G,EAAK;AAAA;;AACT,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,sBAAKC,QAAL,CAAcJ,GAAd,EAAmBK,IAAnB,CAAwB,gBAAQ;AAC5B,wBAAIC,QAAQ,qBAAZ;AACAA,0BAAMC,qBAAN,CAA4BC,IAA5B,EAAkCH,IAAlC,CAAuC,oBAAY;AAC/CH,gCAAQO,KAAKC,SAAL,CAAeC,QAAf,CAAR;AACH,qBAFD,EAEGC,KAFH,CAES,eAAO;AACZC,gCAAQC,GAAR,cAAuBC,GAAvB;AACH,qBAJD;AAKH,iBAPD;AAQH,aATM,CAAP;AAUH;;AAED;;;;;;;;iCAKSf,G,EAAK;AACV,gBAAIQ,OAAO,EAAX;AACA,mBAAO,IAAIP,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC5BF,oBAAIgB,EAAJ,CAAO,MAAP,EAAe,UAAUC,KAAV,EAAiB;AAC5BT,yBAAKU,IAAL,CAAUD,KAAV;AACH,iBAFD,EAEGD,EAFH,CAEM,KAFN,EAEa,YAAY;AACrBR,2BAAOW,OAAOC,MAAP,CAAcZ,IAAd,EAAoBa,QAApB,EAAP;AACAnB,4BAAQM,KAAKa,QAAL,EAAR;AACH,iBALD;AAMH,aAPM,CAAP;AAQH;;;;;;kBAtCgBtB,I","file":"main.js","sourcesContent":["/**\r\n * Created by Denis on 30.03.2017.\r\n */\r\n\r\nimport Cards from './objects/cards';\r\n\r\nexport default class Main {\r\n    constructor() {\r\n\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {Object} req запрос\r\n     * @return Promise resolve - {String}, reject - {String}\r\n     */\r\n    analyse(req) {\r\n        return new Promise((resolve, reject) => {\r\n            this._getBody(req).then(body => {\r\n                let cards = new Cards();\r\n                cards.createTripDescription(body).then(response => {\r\n                    resolve(JSON.stringify(response));\r\n                }).catch(err => {\r\n                    console.log(`analyse=${err}`);\r\n                });\r\n            })\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Метод достает тело запроса\r\n     * @param req\r\n     * @return {Promise} resolve - {String} тело запроса\r\n     */\r\n    _getBody(req) {\r\n        let body = [];\r\n        return new Promise((resolve) => {\r\n            req.on('data', function (chunk) {\r\n                body.push(chunk);\r\n            }).on('end', function () {\r\n                body = Buffer.concat(body).toString();\r\n                resolve(body.toString());\r\n            });\r\n        });\r\n    }\r\n}"]}